// <auto-generated />
using System;
using AEIMapMobile.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AEIMapMobile.DAL.Migrations
{
    [DbContext(typeof(AEIMapDbContext))]
    [Migration("20210613184317_AddedPathPoints")]
    partial class AddedPathPoints
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.FilterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.ToTable("FilterValues");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.FloorSectorConnection", b =>
                {
                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<int>("Sector1Id")
                        .HasColumnType("int");

                    b.Property<int>("Sector2Id")
                        .HasColumnType("int");

                    b.HasKey("FloorId", "Sector1Id", "Sector2Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("Sector1Id");

                    b.HasIndex("Sector2Id");

                    b.ToTable("FloorSectorConnections");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.NextPathPoint", b =>
                {
                    b.Property<int>("SourcePointId")
                        .HasColumnType("int");

                    b.Property<int>("NextPointId")
                        .HasColumnType("int");

                    b.HasKey("SourcePointId", "NextPointId");

                    b.HasIndex("NextPointId");

                    b.HasIndex("SourcePointId");

                    b.ToTable("NextPathPoints");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.PathPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsExitPoint")
                        .HasColumnType("bit");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("SectorId");

                    b.ToTable("PathPoints");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExitPointId")
                        .HasColumnType("int");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExitPointId")
                        .IsUnique()
                        .HasFilter("[ExitPointId] IS NOT NULL");

                    b.HasIndex("FloorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.RoomPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("Order", "RoomId")
                        .IsUnique();

                    b.ToTable("RoomPoints");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("FilterValueRoom", b =>
                {
                    b.Property<int>("FilterValuesId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.HasKey("FilterValuesId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("FilterValueRoom");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.FilterValue", b =>
                {
                    b.HasOne("AEIMapMobile.DAL.Entities.Filter", "Filter")
                        .WithMany("FilterValues")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.FloorSectorConnection", b =>
                {
                    b.HasOne("AEIMapMobile.DAL.Entities.Floor", "Floor")
                        .WithMany("SectorConnections")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AEIMapMobile.DAL.Entities.Sector", "Sector1")
                        .WithMany("Sector1Connections")
                        .HasForeignKey("Sector1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AEIMapMobile.DAL.Entities.Sector", "Sector2")
                        .WithMany("Sector2Connections")
                        .HasForeignKey("Sector2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("Sector1");

                    b.Navigation("Sector2");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.NextPathPoint", b =>
                {
                    b.HasOne("AEIMapMobile.DAL.Entities.PathPoint", "NextPoint")
                        .WithMany("NextPathPoints")
                        .HasForeignKey("NextPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AEIMapMobile.DAL.Entities.PathPoint", "SourcePoint")
                        .WithMany("SourcePathPoints")
                        .HasForeignKey("SourcePointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NextPoint");

                    b.Navigation("SourcePoint");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.PathPoint", b =>
                {
                    b.HasOne("AEIMapMobile.DAL.Entities.Floor", "Floor")
                        .WithMany("PathPoints")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AEIMapMobile.DAL.Entities.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Room", b =>
                {
                    b.HasOne("AEIMapMobile.DAL.Entities.PathPoint", "ExitPoint")
                        .WithMany()
                        .HasForeignKey("ExitPointId");

                    b.HasOne("AEIMapMobile.DAL.Entities.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExitPoint");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.RoomPoint", b =>
                {
                    b.HasOne("AEIMapMobile.DAL.Entities.Room", "Room")
                        .WithMany("Points")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FilterValueRoom", b =>
                {
                    b.HasOne("AEIMapMobile.DAL.Entities.FilterValue", null)
                        .WithMany()
                        .HasForeignKey("FilterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AEIMapMobile.DAL.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Filter", b =>
                {
                    b.Navigation("FilterValues");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Floor", b =>
                {
                    b.Navigation("PathPoints");

                    b.Navigation("Rooms");

                    b.Navigation("SectorConnections");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.PathPoint", b =>
                {
                    b.Navigation("NextPathPoints");

                    b.Navigation("SourcePathPoints");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Room", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("AEIMapMobile.DAL.Entities.Sector", b =>
                {
                    b.Navigation("Sector1Connections");

                    b.Navigation("Sector2Connections");
                });
#pragma warning restore 612, 618
        }
    }
}
